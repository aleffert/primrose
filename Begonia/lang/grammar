module ::=
	import*
	top-decl*
	EOF

scope ::= LOCAL | LET

terminator ::= EOF EOL

type ::= Float | type ARROW type | LBRACKET record-type-list RBRACKET

record-type-list ::=
	record-type-list question-option IDENT COLON type
	| record-type-list IDENT COLON type COMMA 

question-option ::= QUESTION_MARK
	| // nothing


imports ::= import imports
	| //nothing

import ::= IMPORT IDENT

top-decl ::= 
	EOL
	| EXTERNAL TYPE IDENT
	| scope val-bindings exp
	| exp


val-binding ::=
	arg val-binding
	| EQUALS

arg ::=
	LPAREN IDENT COLON type RPAREN
	| record-binding


record-binding ::= LBRACKET record-binding-list RBRACKET
record-fields ::= record-fields IDENT EQUALS exp
	|


exp ::= atom exp
	| atom

atom ::= NUM | PATH | OP | BANG LBRACKET stmts RBRACKET | IF exp THEN eols exp eols ELSE eols exp | POUND 

stmts ::= stmts sequencer stmt
stmt ::= LET pat EQUAL exp