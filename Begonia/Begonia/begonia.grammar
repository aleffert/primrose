@start = module;
@symbols = '=' 'import' 'type' 'external' 'local' 'let' '#' ':' '(' ')' '<=' '{' '}' ',' 'fun' ',' ;

ident = /[A-Za-z][A-Za-z0-9_]*/ ;
opSymbol = /[-+*$]/ ;

scope = 'local' | 'let';

module = imports topDecls;

imports = import*;
import = 'import'! ident eols;

topDecls = (topDeclExternalType | topDeclValBinding | topDeclFunBinding)*;

topDeclExternalType = 'external'! 'type'! ident eols!;
topDeclValBinding = scope ident '='! exp eols!;
topDeclFunBinding = scope ident bindingArguments '='! exp eols!;

bindingArguments = bindingArgument bindingArgument*;
bindingArgument = varBinding | recordBinding;

varBinding = '('! ident ':'! typeArgument ')'!;

recordBinding = '{'! recordBindingFieldsOpt '}'!;
recordBindingFieldsOpt = nullOpt | recordBindingFields;
recordBindingFields = recordBindingField (recordBreak! recordBindingField)*;
recordBindingField = ident ':'! typeArgument defaultValueOpt;

recordBreak = (','! eol*) | eols;

typeArgument = typeArgumentType;
typeArgumentType = type;

defaultValueOpt = nullOpt | '='! exp;
nullOpt = Empty;

exp = atom+;

atom = expNum | externalMethod | expVar | expRecord | expLambda | expStmt | '('! exp ')'!;
expNum = Number;
expVar = ident | opSymbol;
expLambda = 'fun'! bindingArguments '='! exp;
expStmt = '{'! ';'! eol* (stmt stmtBreak!)* eol* ';'! '}'! ;

expRecord = '{'! eol* expRecordFieldsOpt eol* '}'!;
expRecordFieldsOpt = nullOpt | expRecordFields;
expRecordFields = expRecordField (recordBreak! expRecordField)*;
expRecordField = ident (bindingArgument*) '='! exp;

externalMethod = '#'! exp '<='! exp ':'! type;

stmt = stmtExp | stmtBind;
stmtExp = exp;
stmtBind = 'let'! ident bindingArgument* '='! exp;
stmtBreak = (';'! eol*) | eols;

type = typeVar;
typeVar = ident;

eols = eol+;
eol = '
'!;

