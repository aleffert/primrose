@start = module;
@symbols = '=' 'import' 'type' 'external' 'local' 'let' '#' ':' '(' ')' '<=' '{' '}' ',' 'fun' ',' 'if' 'then' 'else' '->';
@allowsHexadecimalNotation = YES;
@allowsFloatingPoint = YES;

ident = /[A-Za-z][A-Za-z0-9_]*/ ;
opSymbol = (/[-+*$<>^&%]/ | '/' | '<=' | '>=' )+;

scope = 'local' | 'let';

module = imports topDecls;

imports = import*;
import = 'import' ident eols;
import = 'open' ident eols;

topDecls = (topDeclExternalType | topDeclValBinding | topDeclFunBinding | topDeclTypeBinding)*;

topDeclTypeBinding = 'type'! ident '='! datatypeArms eols!;
topDeclExternalType = 'external'! 'type'! ident eols!;
topDeclValBinding = scope ident '=' exp eols!;
topDeclFunBinding = scope ident bindingArguments '=' exp eols!;

datatypeArms = datatypeArm (eol* '|'! eol* datatypeArm)*;
datatypeArm = ident recordBinding;

bindingArguments = bindingArgument bindingArgument*;
bindingArgument = varBinding | recordBinding;

varBinding = '('! ident ':'! type ')'!;

recordBinding = '{'! eol* recordBindingFieldsOpt eol* '}'!;
recordBindingFieldsOpt = nullOpt | recordBindingFields;
recordBindingFields = recordBindingField (recordBreak! recordBindingField)*;
recordBindingField = ident ':'! type defaultValueOpt;

recordBreak = (','! eol*) | eols;

defaultValueOpt = nullOpt | ('='! exp);
nullOpt = Empty;

exp = path+ checkOpt;
checkOpt = nullOpt | (':'! type);

pathItem = ident;
projections = ('.'! pathItem)* ;

path = atom projections;

atom = expNum | expString | expVar | expRecord | expLambda | expStmt | expIf | '('! exp ')'!;
expNum = Number;
expString = QuotedString;
expVar = ident | opSymbol;
expLambda = 'fun'! bindingArguments '='! exp;
expStmt = '{'! ';'! eol* (stmt stmtBreak!)* eol* ';'! '}'! ;
expIf  = 'if' eol* exp eol* 'then' eol* exp eol* 'else' exp eol*;

expRecord = '{'! eol* expRecordFieldsOpt eol* '}'!;
expRecordFieldsOpt = expRecordFields | nullOpt;
expRecordFields = expRecordField (recordBreak! expRecordField)*;
expRecordField = ident (bindingArgument*) '='! exp;

stmt = stmtExp | stmtBind;
stmtExp = exp;
stmtBind = 'let'! ident bindingArgument* '='! exp;
stmtBreak = (';'! eol*) | eols;

type = typeAtom+;
typeAtom = typeVar | '('! type ')'! | typeRecord;
typeRecord = recordBinding;
typeVar = ident | '->';

eols = eol+;
eol = '
'!;

